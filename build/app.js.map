{"version":3,"sources":["../src/app.js"],"names":["App","constructor","server","Sentry","init","sentryConfig","middlewares","routes","exceptionHandler","use","Handlers","requestHandler","express","json","errorHandler","err","req","res","next","process","env","NODE_ENV","errors","Youch","toJSON","status","error"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;;;;;;;AAEA,MAAMA,GAAN,CAAU;AACRC,EAAAA,WAAW,GAAG;AACZ,SAAKC,MAAL,GAAc,uBAAd;AAEAC,IAAAA,MAAM,CAACC,IAAP,CAAYC,eAAZ;AAEA,SAAKC,WAAL;AACA,SAAKC,MAAL;AACA,SAAKC,gBAAL;AACD;;AAEDF,EAAAA,WAAW,GAAG;AACZ,SAAKJ,MAAL,CAAYO,GAAZ,CAAgBN,MAAM,CAACO,QAAP,CAAgBC,cAAhB,EAAhB;AACA,SAAKT,MAAL,CAAYO,GAAZ,CAAgB,oBAAhB;AACA,SAAKP,MAAL,CAAYO,GAAZ,CAAgBG,iBAAQC,IAAR,EAAhB;AACD;;AAEDN,EAAAA,MAAM,GAAG;AACP,SAAKL,MAAL,CAAYO,GAAZ,CAAgBF,eAAhB;AACA,SAAKL,MAAL,CAAYO,GAAZ,CAAgBN,MAAM,CAACO,QAAP,CAAgBI,YAAhB,EAAhB;AACD;;AAEDN,EAAAA,gBAAgB,GAAG;AACjB,SAAKN,MAAL,CAAYO,GAAZ,CAAgB,OAAOM,GAAP,EAAYC,GAAZ,EAAiBC,GAAjB,EAAsBC,IAAtB,KAA+B;AAC7C,UAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1C,cAAMC,MAAM,GAAG,MAAM,IAAIC,cAAJ,CAAUR,GAAV,EAAeC,GAAf,EAAoBQ,MAApB,EAArB;AAEA,eAAOP,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBZ,IAAhB,CAAqBS,MAArB,CAAP;AACD;;AACD,aAAOL,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBZ,IAAhB,CAAqB;AAACa,QAAAA,KAAK,EAAE;AAAR,OAArB,CAAP;AACD,KAPD;AAQD;;AA/BO;;eAkCK,IAAI1B,GAAJ,GAAUE,M","sourcesContent":["import 'dotenv/config';\n\nimport express from 'express';\nimport path from 'path';\nimport cors from 'cors';\nimport Youch from 'youch';\nimport * as Sentry from '@sentry/node';\nimport 'express-async-errors';\n\nimport routes from './routes';\nimport sentryConfig from './config/sentry';\n\nimport './database';\n\nclass App {\n  constructor() {\n    this.server = express();\n\n    Sentry.init(sentryConfig);\n\n    this.middlewares();\n    this.routes();\n    this.exceptionHandler();\n  }\n\n  middlewares() {\n    this.server.use(Sentry.Handlers.requestHandler());\n    this.server.use(cors());\n    this.server.use(express.json());\n  }\n\n  routes() {\n    this.server.use(routes);\n    this.server.use(Sentry.Handlers.errorHandler());\n  }\n\n  exceptionHandler() {\n    this.server.use(async (err, req, res, next) => {\n      if (process.env.NODE_ENV === 'development') {\n        const errors = await new Youch(err, req).toJSON();\n\n        return res.status(500).json(errors);\n      }\n      return res.status(500).json({error: 'Internal server error'});\n    });\n  }\n}\n\nexport default new App().server;\n"],"file":"app.js"}