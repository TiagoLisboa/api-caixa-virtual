{"version":3,"sources":["../../../src/app/controllers/CategoryController.js"],"names":["CategoryController","index","req","res","user_id","userId","page","query","categories","Category","findAll","where","limit","offset","send","CategoryCollection","store","categorySchema","Joi","object","name","string","required","result","body","e","ValidationException","status","user","User","findByPk","category","createCategory","CategoryResourcer","err","message","update","id","params","categoryId","destroy"],"mappings":"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","sourcesContent":["import Joi from 'joi';\n\nimport validateSchema from '../utils/validateSchema';\nimport ValidationException from '../exceptions/ValidationException';\n\nimport Category from '../models/category';\nimport User from '../models/user';\n\nimport CategoryResourcer from '../resources/Category';\nimport CategoryCollection from '../resources/CategoryCollection';\n\nclass CategoryController {\n  /**\n   * displays a listing of the resource.\n   *\n   * @param {Request}  req\n   * @param {Response} res\n   *\n   * @return {void}\n   */\n  async index(req, res) {\n    const user_id = req.userId;\n    const { page = 1 } = req.query;\n\n    const categories = await Category.findAll({\n      where: { user_id },\n      limit: 20,\n      offset: (page - 1) * 20,\n    });\n\n    return res.send(new CategoryCollection(categories));\n  }\n\n  /**\n   * stores a instance of the resource.\n   *\n   * @param {Request}  req\n   * @param {Response} res\n   *\n   * @return {void}\n   */\n  async store(req, res) {\n    const categorySchema = Joi.object({\n      name: Joi.string().required(),\n    });\n    let result;\n    try {\n      result = validateSchema(req.body, categorySchema);\n    } catch (e) {\n      if (e instanceof ValidationException) {\n        return res.status(422).send(e);\n      }\n    }\n    try {\n      const user = await User.findByPk(req.userId);\n      const category = await user.createCategory({ name: result.name });\n      return res.send(new CategoryResourcer(category));\n    } catch (err) {\n      return res\n        .status(400)\n        .send({ message: 'error while creating category.' });\n    }\n  }\n\n  /**\n   * updates a instance of the resource.\n   *\n   * @param {Request}  req\n   * @param {Response} res\n   *\n   * @return {void}\n   */\n  async update(req, res) {\n    const id = req.params.categoryId;\n    const categorySchema = Joi.object({\n      name: Joi.string().required(),\n    });\n    let result;\n    try {\n      result = validateSchema(req.body, categorySchema);\n    } catch (e) {\n      if (e instanceof ValidationException) {\n        return res.status(422).send(e);\n      }\n    }\n    const category = await Category.findByPk(id);\n    if (!category) {\n      return res.status(404).send({ message: 'Not found' });\n    }\n    try {\n      const { name } = result;\n      await category.update({ name });\n      return res.send(new CategoryResourcer(category));\n    } catch (err) {\n      return res\n        .status(400)\n        .send({ message: 'error while updating category.' });\n    }\n  }\n\n  /**\n   * deletes a instance of the resource.\n   *\n   * @param {Request}  req\n   * @param {Response} res\n   *\n   * @return {void}\n   */\n  async destroy(req, res) {\n    const id = req.params.categoryId;\n\n    const category = await Category.findByPk(id);\n    if (!category) {\n      return res.status(404).send({ message: 'Not found' });\n    }\n    try {\n      await category.destroy();\n      return res.send({ message: 'category sucessfully deleted.' });\n    } catch (err) {\n      return res\n        .status(400)\n        .send({ message: 'error while updating category.' });\n    }\n  }\n}\n\nexport default new CategoryController();\n"],"file":"CategoryController.js"}