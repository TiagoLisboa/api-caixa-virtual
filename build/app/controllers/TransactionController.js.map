{"version":3,"sources":["../../../src/app/controllers/TransactionController.js"],"names":["TransactionsController","index","req","res","page","query","cashier_id","params","cashierId","transactions","Transaction","findAll","where","limit","offset","include","Category","send","TransactionCollection","store","transactionSchema","Joi","object","type","number","required","value","categories","array","items","description","string","result","body","cashier","Cashier","findByPk","status","error","transaction","create","id","model","as","addCategories","getCategories","map","name","TransactionResourcer","err","ValidationException","message","update","transactionId","e","destroy"],"mappings":"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","sourcesContent":["import Joi from 'joi';\n\nimport validateSchema from '../utils/validateSchema';\nimport ValidationException from '../exceptions/ValidationException';\nimport Category from '../models/category';\nimport Cashier from '../models/cashier';\nimport Transaction from '../models/transaction';\nimport TransactionResourcer from '../resources/Transaction';\nimport TransactionCollection from '../resources/TransactionCollection';\n\nclass TransactionsController {\n  /**\n   * displays a listing of the resource.\n   *\n   * @param {Request}  req\n   * @param {Response} res\n   *\n   * @return {void}\n   */\n  async index(req, res) {\n    const { page = 1 } = req.query;\n    const cashier_id = req.params.cashierId;\n\n    const transactions = await Transaction.findAll({\n      where: { cashier_id },\n      limit: 20,\n      offset: (page - 1) * 20,\n      include: Category,\n    });\n\n    return res.send(new TransactionCollection(transactions));\n  }\n\n  /**\n   * stores a instance of the resource.\n   *\n   * @param {Request}  req\n   * @param {Response} res\n   *\n   * @return {void}\n   */\n  async store(req, res) {\n    const transactionSchema = Joi.object({\n      type: Joi.number().required(),\n      value: Joi.number().required(),\n      categories: Joi.array().items(Joi.number()),\n      description: Joi.string(),\n    });\n    try {\n      const result = validateSchema(req.body, transactionSchema);\n      const { type, value, categories, description } = result;\n\n      const cashier = await Cashier.findByPk(req.params.cashierId);\n      // TODO: create model related services to handle database operations\n      // such this, and throw proper exceptions case not found\n      if (!cashier) {\n        return res.status(404).send({\n          error: 'Cashier not found!',\n        });\n      }\n      const transaction = await Transaction.create(\n        { type, value, description, cashier_id: cashier.id },\n        {\n          include: [{ model: Cashier, as: 'cashier' }, Category],\n        }\n      );\n      await transaction.addCategories(categories);\n      transaction.categories = await transaction.getCategories();\n      transaction.categories = transaction.categories.map(({ name }) => ({\n        name,\n      }));\n      return res.send(new TransactionResourcer(transaction));\n    } catch (err) {\n      if (err instanceof ValidationException) {\n        return res.status(422).send(err);\n      }\n      return res\n        .status(400)\n        .send({ message: 'error while creating transaction.' });\n    }\n  }\n\n  /**\n   * updates a instance of the resource.\n   *\n   * @param {Request}  req\n   * @param {Response} res\n   *\n   * @return {void}\n   */\n  async update(req, res) {\n    const id = req.params.transactionId;\n    const transactionSchema = Joi.object({\n      type: Joi.number().required(),\n      value: Joi.number().required(),\n      description: Joi.string(),\n    });\n    let result;\n    try {\n      result = validateSchema(req.body, transactionSchema);\n    } catch (e) {\n      if (e instanceof ValidationException) {\n        return res.status(422).send(e);\n      }\n    }\n    const transaction = await Transaction.findByPk(id);\n    if (!transaction) {\n      return res.status(404).send({ message: 'Not found' });\n    }\n    try {\n      const { type, value, description } = result;\n      await transaction.update({ type, value, description });\n      return res.send(new TransactionResourcer(transaction));\n    } catch (err) {\n      return res\n        .status(400)\n        .send({ message: 'error while updating transaction.' });\n    }\n  }\n\n  /**\n   * deletes a instance of the resource.\n   *\n   * @param {Request}  req\n   * @param {Response} res\n   *\n   * @return {void}\n   */\n  async destroy(req, res) {\n    const id = req.params.transactionId;\n\n    const transaction = await Transaction.findByPk(id);\n    if (!transaction) {\n      return res.status(404).send({ message: 'Not found' });\n    }\n    try {\n      await transaction.destroy();\n      return res.send({ message: 'transaction sucessfully deleted.' });\n    } catch (err) {\n      return res\n        .status(400)\n        .send({ message: 'error while updating transaction.' });\n    }\n  }\n}\n\nexport default new TransactionsController();\n"],"file":"TransactionController.js"}