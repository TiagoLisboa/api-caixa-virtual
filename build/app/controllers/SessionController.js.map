{"version":3,"sources":["../../../src/app/controllers/SessionController.js"],"names":["SessionController","store","req","res","next","email","password","body","loginSchema","Joi","object","string","required","result","e","ValidationException","status","send","user","User","findOne","where","json","error","checkPassword","id","token","jwt","sign","authConfig","secret","expiresIn","SessionResource"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,iBAAN,CAAwB;AACtB;;;;;;;;AAQA,QAAMC,KAAN,CAAYC,GAAZ,EAAiBC,GAAjB,EAAsBC,IAAtB,EAA4B;AAC1B,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBJ,GAAG,CAACK,IAAhC;;AACA,UAAMC,WAAW,GAAGC,aAAIC,MAAJ,CAAW;AAC7BL,MAAAA,KAAK,EAAEI,aAAIE,MAAJ,GACJC,QADI,GAEJP,KAFI,EADsB;AAI7BC,MAAAA,QAAQ,EAAEG,aAAIE,MAAJ,GAAaC,QAAb;AAJmB,KAAX,CAApB;;AAMA,QAAIC,MAAJ;;AACA,QAAI;AACFA,MAAAA,MAAM,GAAG,6BAAeX,GAAG,CAACK,IAAnB,EAAyBC,WAAzB,CAAT;AACD,KAFD,CAEE,OAAOM,CAAP,EAAU;AACV,UAAIA,CAAC,YAAYC,4BAAjB,EAAsC;AACpC,eAAOZ,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,CAArB,CAAP;AACD;AACF;;AACD,UAAMI,IAAI,GAAG,MAAMC,cAAKC,OAAL,CAAa;AAC9BC,MAAAA,KAAK,EAAE;AAAEhB,QAAAA;AAAF;AADuB,KAAb,CAAnB;;AAGA,QAAI,CAACa,IAAL,EAAW;AACT,aAAOf,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAP;AACD;;AACD,QAAI,EAAE,MAAML,IAAI,CAACM,aAAL,CAAmBlB,QAAnB,CAAR,CAAJ,EAA2C;AACzC,aAAOH,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAP;AACD;;AACD,UAAM;AAAEE,MAAAA;AAAF,QAASP,IAAf;;AACA,UAAMQ,KAAK,GAAGC,sBAAIC,IAAJ,CAAS;AAAEH,MAAAA;AAAF,KAAT,EAAiBI,cAAWC,MAA5B,EAAoC;AAChDC,MAAAA,SAAS,EAAEF,cAAWE;AAD0B,KAApC,CAAd;;AAGA,WAAO5B,GAAG,CAACc,IAAJ,CAAS,IAAIe,gBAAJ,CAAoBd,IAApB,EAA0BQ,KAA1B,CAAT,CAAP;AACD;;AAvCqB;;eA0CT,IAAI1B,iBAAJ,E","sourcesContent":["import jwt from 'jsonwebtoken';\nimport Joi from 'joi';\n\nimport authConfig from '../../config/auth';\nimport ValidationException from '../exceptions/ValidationException';\nimport User from '../models/user';\nimport SessionResource from '../resources/Session';\nimport validateSchema from '../utils/validateSchema';\n\nclass SessionController {\n  /**\n   * stores a instance of the resource.\n   *\n   * @param {Request}  req\n   * @param {Response} res\n   *\n   * @return {void}\n   */\n  async store(req, res, next) {\n    const { email, password } = req.body;\n    const loginSchema = Joi.object({\n      email: Joi.string()\n        .required()\n        .email(),\n      password: Joi.string().required(),\n    });\n    let result;\n    try {\n      result = validateSchema(req.body, loginSchema);\n    } catch (e) {\n      if (e instanceof ValidationException) {\n        return res.status(422).send(e);\n      }\n    }\n    const user = await User.findOne({\n      where: { email },\n    });\n    if (!user) {\n      return res.status(401).json({ error: 'User not found' });\n    }\n    if (!(await user.checkPassword(password))) {\n      return res.status(401).json({ error: 'Password does not match' });\n    }\n    const { id } = user;\n    const token = jwt.sign({ id }, authConfig.secret, {\n      expiresIn: authConfig.expiresIn,\n    });\n    return res.send(new SessionResource(user, token));\n  }\n}\n\nexport default new SessionController();\n"],"file":"SessionController.js"}